package me.moomoo.anarchyexploitfixes.utils.models;

import me.moomoo.anarchyexploitfixes.common.AEFScheduler;
import me.moomoo.anarchyexploitfixes.common.ScheduledTask;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.plugin.java.JavaPlugin;

public class DefaultAEFScheduler implements AEFScheduler {
    private final JavaPlugin plugin;

    public DefaultAEFScheduler(JavaPlugin plugin) {
        this.plugin = plugin;
    }

    @Override
    public ScheduledTask runGlobalAtFixedRate(Runnable runnable, long period, long delay) {
        return wrapTask(plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, runnable, delay, period));
    }

    @Override
    public ScheduledTask runGlobalDelayed(Runnable runnable, long delay) {
        return wrapTask(plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, runnable, delay));
    }

    @Override
    public ScheduledTask runGlobal(Runnable runnable) {
        return wrapTask(plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, runnable));
    }

    @Override
    public ScheduledTask runSyncToChunk(World world, int x, int z, Runnable runnable) {
        return runGlobal(runnable);
    }

    @Override
    public ScheduledTask runSyncToChunkDelayed(Location location, Runnable runnable, long delay) {
        return runGlobalDelayed(runnable, delay);
    }

    @Override
    public ScheduledTask runSyncToEntity(Entity entity, Runnable runnable) {
        return runGlobal(runnable);
    }

    @Override
    public ScheduledTask runSyncToEntityDelayed(Entity entity, Runnable runnable, long delay) {
        return runGlobalDelayed(runnable, delay);
    }

    private ScheduledTask wrapTask(int taskId) {
        return () -> plugin.getServer().getScheduler().cancelTask(taskId);
    }
}
