package me.moomoo.anarchyexploitfixes.commands;

import cloud.commandframework.annotations.CommandDescription;
import cloud.commandframework.annotations.CommandMethod;
import cloud.commandframework.annotations.CommandPermission;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.KyoriUtil;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

public class ToggleConnectionMsgsCommand implements AnarchyExploitFixesCommand {
    private final AnarchyExploitFixes plugin;

    public ToggleConnectionMsgsCommand() {
        this.plugin = AnarchyExploitFixes.getInstance();
    }

    @Override
    public boolean shouldRegister() {
        return AnarchyExploitFixes.getConfiguration().cmd_toggleConMsgs_enabled;
    }

    @CommandMethod("toggleconnectionmsgs")
    @CommandPermission("anarchyexploitfixes.cmd.toggleconnectionmsgs")
    @CommandDescription("Toggle connection messages on or off")
    public void onConMsgToggle(final CommandSender sender) {
        if (!(sender instanceof Player player)) {
            KyoriUtil.sendMessage(sender, Component.text("Only players can execute this command.").color(NamedTextColor.RED));
            return;
        }

        boolean sendEnabledMsg;
        boolean onByDefault = AnarchyExploitFixes.getConfiguration().connectionMsgsAreOnByDefault;
        if (plugin.CONNECTION_MSG_TOGGLE.contains(player.getUniqueId())) {
            plugin.CONNECTION_MSG_TOGGLE.remove(player.getUniqueId());

            sendEnabledMsg = onByDefault;
        } else {
            plugin.CONNECTION_MSG_TOGGLE.add(player.getUniqueId());

            sendEnabledMsg = !onByDefault;
        }

        if (sendEnabledMsg) {
            KyoriUtil.sendMessage(player, AnarchyExploitFixes.getLang(player).misc_enabledConnectionMsgs);
        } else {
            KyoriUtil.sendMessage(player, AnarchyExploitFixes.getLang(player).misc_disabledConnectionMsgs);
        }
    }
}
