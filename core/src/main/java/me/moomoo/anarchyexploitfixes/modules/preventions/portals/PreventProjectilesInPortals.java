package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Projectile;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEvent;

import java.util.HashSet;

public class PreventProjectilesInPortals implements AnarchyExploitFixesModule, Listener {

    private final HashSet<EntityType> PROJECTILE_TYPES = new HashSet<>();

    public PreventProjectilesInPortals() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment("preventions.portals.prevent-projectiles-in-portals",
                "Prevents a lag exploit. Might disable some chunk loader designs.");
    }

    @Override
    public String name() {
        return "prevent-projectiles-in-portals";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        return (
                config.getBoolean("preventions.portals.prevent-projectiles-in-portals", false)
                && !config.getBoolean("preventions.portals.prevent-all-entities-in-portals", false)
        );
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityPortal(EntityPortalEvent event) {
        if (PROJECTILE_TYPES.contains(event.getEntityType())) {
            event.setCancelled(true);
            return;
        }

        if (event.getEntity() instanceof Projectile) {
            event.setCancelled(true);
            PROJECTILE_TYPES.add(event.getEntityType());
        }
    }
}
