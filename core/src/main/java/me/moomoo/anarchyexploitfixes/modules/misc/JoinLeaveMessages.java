package me.moomoo.anarchyexploitfixes.modules.misc;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.NamespacedKeys;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.KyoriUtil;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.TextReplacementConfig;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

public class JoinLeaveMessages implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final boolean connectionMsgsOnByDefault, showInConsole, firstJoinEnabled;

    public JoinLeaveMessages() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("misc.join-leave-messages.enable",  "If you want to hide yourself or someone else when logging into the game,\nuse these permissions: anarchyexploitfixes.silentJoin, anarchyexploitfixes.silentLeave");
        this.connectionMsgsOnByDefault = config.connectionMsgsAreOnByDefault;
        this.showInConsole = config.getBoolean("misc.join-leave-messages.show-in-console", false);
        this.firstJoinEnabled = config.getBoolean("misc.join-leave-messages.first-join-messages.enable", false);
    }

    @Override
    public String name() {
        return "join-leave-messages";
    }

    @Override
    public String category() {
        return "misc";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("misc.join-leave-messages.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        event.setJoinMessage(null);
        Player joiningPlayer = event.getPlayer();
        if (firstJoinEnabled && !joiningPlayer.hasPlayedBefore()) return;
        if (joiningPlayer.hasPermission("anarchyexploitfixes.silentJoin")) return;

        for (Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (
                    connectionMsgsOnByDefault && !plugin.CONNECTION_MSG_TOGGLE.contains(onlinePlayer.getUniqueId())
                            || !connectionMsgsOnByDefault && plugin.CONNECTION_MSG_TOGGLE.contains(onlinePlayer.getUniqueId())
            ) {
                sendJoinMessage(onlinePlayer, joiningPlayer);
            }
        }

        if (showInConsole) {
            // Send to ConsoleSender so we can display colors
            KyoriUtil.sendMessage(plugin.getServer().getConsoleSender(), AnarchyExploitFixes.getLang(joiningPlayer).misc_joinMessage
                    .replaceText(TextReplacementConfig.builder().matchLiteral("%player%").replacement(Component.text(joiningPlayer.getName())).build())
                    .append(Component.text(" (" + joiningPlayer.getLocale() + ")"))
            );
        }
    }

    private void sendJoinMessage(Player receiver, Player joiningPlayer) {
        KyoriUtil.sendMessage(receiver, AnarchyExploitFixes.getLang(receiver).misc_joinMessage
                .replaceText(TextReplacementConfig.builder().matchLiteral("%player%").replacement(Component.text(joiningPlayer.getName())).build())
        );
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerLeaveEvent(PlayerQuitEvent event) {
        event.setQuitMessage(null);
        Player leavingPlayer = event.getPlayer();
        if (leavingPlayer.hasPermission("anarchyexploitfixes.silentLeave")) return;

        for (Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (onlinePlayer.equals(leavingPlayer)) continue; // No need to send it to the leaver
            if (
                    connectionMsgsOnByDefault && !plugin.CONNECTION_MSG_TOGGLE.contains(onlinePlayer.getUniqueId())
                            || !connectionMsgsOnByDefault && plugin.CONNECTION_MSG_TOGGLE.contains(onlinePlayer.getUniqueId())
            ) {
                sendLeaveMessage(onlinePlayer, leavingPlayer);
            }
        }

        if (showInConsole) {
            // Send to ConsoleSender so we can display colors
            KyoriUtil.sendMessage(plugin.getServer().getConsoleSender(), AnarchyExploitFixes.getLang(leavingPlayer).misc_leaveMessage
                    .replaceText(TextReplacementConfig.builder().matchLiteral("%player%").replacement(Component.text(leavingPlayer.getName())).build())
                    .append(Component.text(" (" + leavingPlayer.getLocale() + ")"))
            );
        }
    }

    private void sendLeaveMessage(Player onlinePlayer, Player leavingPlayer) {
        KyoriUtil.sendMessage(onlinePlayer, AnarchyExploitFixes.getLang(onlinePlayer).misc_leaveMessage
                .replaceText(TextReplacementConfig.builder().matchLiteral("%player%").replacement(Component.text(leavingPlayer.getName())).build())
        );
    }
}
