package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEvent;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

public class PreventSpecificEntitiesInPortals implements AnarchyExploitFixesModule, Listener {

    private final HashSet<EntityType> forbiddenTypes = new HashSet<>();

    public PreventSpecificEntitiesInPortals() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().getList(
                "preventions.portals.prevent-specific-types.entities",
                List.of("DROPPED_ITEM", "FIREWORK", "PRIMED_TNT", "THROWN_EXP_BOTTLE", "EXPERIENCE_ORB", "ARMOR_STAND"),
                "Defaults prevent common lag methods."
        ).forEach(entry -> {
            try {
                EntityType entityType = EntityType.valueOf(entry);
                this.forbiddenTypes.add(entityType);
            } catch (IllegalArgumentException e) {
                LogUtil.entityTypeNotRecognized(Level.WARNING, name(), entry);
            }
        });
    }

    @Override
    public String name() {
        return "prevent-specific-types-in-portals";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.portals.prevent-specific-types.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortal(EntityPortalEvent event) {
        if (forbiddenTypes.contains(event.getEntityType())) {
            event.setCancelled(true);
        }
    }
}
