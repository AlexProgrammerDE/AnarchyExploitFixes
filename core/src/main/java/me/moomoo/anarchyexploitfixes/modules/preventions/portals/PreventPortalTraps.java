package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import com.cryptomorin.xseries.XMaterial;
import io.papermc.lib.PaperLib;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.common.AEFModule;
import me.moomoo.anarchyexploitfixes.config.AEFConfigImpl;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerPortalEvent;

public class PreventPortalTraps implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final long tpBackDelay;

    public PreventPortalTraps() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        AEFConfigImpl config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.portals.prevent-portal-traps.enable", "Teleports a player back to the original location if they stand in a portal for too long.");
        this.tpBackDelay = config.getInt("preventions.portals.prevent-portal-traps.wait-time-until-tp-back-in-seconds", 10) * 20L;
    }

    @Override
    public String name() {
        return "prevent-portal-traps";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.portals.prevent-portal-traps.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPortal(PlayerPortalEvent event) {
        Player player = event.getPlayer();
        plugin.getAEFScheduler().runSyncToEntityDelayed(player, () -> {
            if (player.getLocation().getBlock().getType().equals(XMaterial.NETHER_PORTAL.parseMaterial())) {
                PaperLib.teleportAsync(player, event.getFrom()).thenAccept(teleportHappened -> player.playSound(player.getLocation(), Sound.BLOCK_PORTAL_TRAVEL, 1.0F, 1.0F));
            }
        }, tpBackDelay);
    }
}
