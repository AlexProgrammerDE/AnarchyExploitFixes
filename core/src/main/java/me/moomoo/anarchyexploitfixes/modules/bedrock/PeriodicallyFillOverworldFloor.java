package me.moomoo.anarchyexploitfixes.modules.bedrock;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.common.AEFModule;
import me.moomoo.anarchyexploitfixes.common.ScheduledTask;
import me.moomoo.anarchyexploitfixes.config.AEFConfigImpl;
import me.moomoo.anarchyexploitfixes.utils.ChunkUtil;
import org.bukkit.Chunk;
import org.bukkit.World;

import java.util.HashSet;
import java.util.List;

import static me.moomoo.anarchyexploitfixes.utils.ChunkUtil.createBedrockLayer;

public class PeriodicallyFillOverworldFloor implements AEFModule {

    private final AnarchyExploitFixes plugin;
    private final long checkPeriod;
    private final double pauseTPS;
    private final boolean checkShouldPauseOnLowTPS;
    private final HashSet<String> exemptedWorlds = new HashSet<>();
    private ScheduledTask scheduledTask;

    public PeriodicallyFillOverworldFloor() {
        shouldEnable();
        plugin = AnarchyExploitFixes.getInstance();
        AEFConfigImpl config = AnarchyExploitFixes.getConfiguration();
        config.addComment("bedrock.fill-in-bedrock.overworld-floor.periodically-check-and-fill.enable", "only checks loaded chunks");
        this.checkPeriod = config.getInt("bedrock.fill-in-bedrock.overworld-floor.periodically-check-and-fill.check-period-in-seconds", 10) * 20L;
        this.exemptedWorlds.addAll(config.getList("bedrock.fill-in-bedrock.overworld-floor.exempted-worlds", List.of("exampleworld", "exampleworld2")));
        this.checkShouldPauseOnLowTPS = config.getBoolean("bedrock.fill-in-bedrock.overworld-floor.periodically-check-and-fill.pause-on-low-tps", true);
        this.pauseTPS = config.getDouble("bedrock.fill-in-bedrock.overworld-floor.periodically-check-and-fill.pause-tps", 16.0);
    }

    @Override
    public String name() {
        return "overworld-floor.periodically-check-and-fill";
    }

    @Override
    public String category() {
        return "bedrock";
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getAEFScheduler().runGlobalAtFixedRate(this::run, checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("bedrock.fill-in-bedrock.overworld-floor.periodically-check-and-fill.enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            if (!world.getEnvironment().equals(World.Environment.NORMAL)) continue;
            if (exemptedWorlds.contains(world.getName())) continue;

            for (Chunk chunk : world.getLoadedChunks()) {
                final int chunkX = chunk.getX();
                final int chunkZ = chunk.getZ();
                if (checkShouldPauseOnLowTPS && (plugin.tpsCache.getTPS(world, chunkX, chunkZ) <= pauseTPS)) continue;

                plugin.getAEFScheduler().runSyncToChunk(world, chunkX, chunkZ, () -> {
                    if (!chunk.isLoaded()) return;

                    createBedrockLayer(chunk, ChunkUtil.guessMinWorldHeight(world));
                });
            }
        }
    }
}
