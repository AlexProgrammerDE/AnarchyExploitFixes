package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;

import java.util.HashSet;
import java.util.logging.Level;

public class NonLivingEntityLimit implements AnarchyExploitFixesModule, Listener, Runnable {

    private final AnarchyExploitFixes plugin;
    private final HashSet<EntityType> NON_LIVING_TYPES = new HashSet<>();
    private final long checkPeriod;
    private final int maxNonLivingEntities;
    private final boolean logIsEnabled;

    public NonLivingEntityLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.entity-limits.non-living-limit.enable",
                "Limit the amount of non living entities in a chunk to prevent lag (does not affect items).");
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.non-living-limit.log-removals", true);
        this.maxNonLivingEntities = config.getInt("chunk-limits.entity-limits.non-living-limit.max-non-living-per-chunk", 100);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.non-living-limit.check-period-in-ticks", 20,
                "20 ticks = 1 second");
    }

    @Override
    public String name() {
        return "entity-limits.non-living-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.non-living-limit.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        if (event.getEntityType().equals(EntityType.DROPPED_ITEM) || event.getEntity() instanceof LivingEntity) return;

        int nonLivingCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            final EntityType type = entity.getType();

            if (NON_LIVING_TYPES.contains(type)) {
                nonLivingCount++;
                if (nonLivingCount <= maxNonLivingEntities) continue;

                entity.remove();
                event.setCancelled(true);
                if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed non-living entity " + entity.getType()
                        + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                        + ", because reached limit of " + maxNonLivingEntities);

                continue;
            }

            if (
                    !type.equals(EntityType.DROPPED_ITEM)
                    && !type.equals(EntityType.ENDER_PEARL)
                    && !(entity instanceof LivingEntity)
            ) {
                NON_LIVING_TYPES.add(type); // Add type of non-living to HashSet for faster operation in the future

                nonLivingCount++;
                if (nonLivingCount <= maxNonLivingEntities) continue;

                entity.remove();
                event.setCancelled(true);
                if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed non-living entity " + entity.getType()
                        + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                        + ", because reached limit of " + maxNonLivingEntities);
            }
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (!chunk.isLoaded()) continue;

                int nonLivingCount = 0;

                for (Entity entity : chunk.getEntities()) {
                    final EntityType type = entity.getType();

                    if (NON_LIVING_TYPES.contains(type)) {
                        nonLivingCount++;
                        if (nonLivingCount <= maxNonLivingEntities) continue;

                        entity.remove();
                        if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed non-living entity "
                                + entity.getType() + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY()
                                + " z:" + entity.getLocation().getZ() + ", because reached limit of " + maxNonLivingEntities);

                        continue;
                    }

                    if (
                            !type.equals(EntityType.DROPPED_ITEM)
                                    && !type.equals(EntityType.ENDER_PEARL)
                                    && !(entity instanceof LivingEntity)
                    ) {
                        NON_LIVING_TYPES.add(type);

                        nonLivingCount++;
                        if (nonLivingCount <= maxNonLivingEntities) continue;

                        entity.remove();
                        if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed non-living entity "
                                + entity.getType() + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY()
                                + " z:" + entity.getLocation().getZ() + ", because reached limit of " + maxNonLivingEntities);
                    }
                }
            }
        }
    }
}
