package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.EntityUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Vehicle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.vehicle.VehicleCreateEvent;

import java.util.logging.Level;

public class MinecartLimit implements AnarchyExploitFixesModule, Listener, Runnable {

    private final AnarchyExploitFixes plugin;
    private final long checkPeriod;
    private final int maxMinecartsPerChunk;
    private final boolean logIsEnabled;

    public MinecartLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.minecart-limit.enable",
                "Limit the amount of minecarts to prevent lag.");
        this.logIsEnabled = config.getBoolean("chunk-limits.minecart-limit.log-removals", false);
        this.maxMinecartsPerChunk = config.getInt("chunk-limits.minecart-limit.max-minecarts-per-chunk", 25);
        this.checkPeriod = config.getInt("chunk-limits.minecart-limit.check-period-in-ticks", 400,
                "200 ticks = 10 seconds.");
    }

    @Override
    public String name() {
        return "minecart-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.minecart-limit.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCreate(VehicleCreateEvent event) {
        Vehicle vehicle = event.getVehicle();
        if (!EntityUtil.MINECARTS.contains(vehicle.getType())) return;

        int minecartCount = 0;

        for (Entity entity : vehicle.getChunk().getEntities()) {
            if (!EntityUtil.MINECARTS.contains(entity.getType())) continue;
            minecartCount++;
            if (minecartCount <= maxMinecartsPerChunk) continue;

            entity.remove();
            if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed minecart " + entity.getType()
                    + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY()
                    + " z:" + entity.getLocation().getZ() + ", because reached limit of " + maxMinecartsPerChunk);
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (!chunk.isLoaded()) continue;

                int minecartCount = 0;

                for (Entity entity : chunk.getEntities()) {
                    if (!EntityUtil.MINECARTS.contains(entity.getType())) continue;

                    minecartCount++;
                    if (minecartCount <= maxMinecartsPerChunk) continue;

                    entity.remove();
                    if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed minecart " + entity.getType()
                            + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY()
                            + " z:" + entity.getLocation().getZ() + ", because reached limit of " + maxMinecartsPerChunk);
                }
            }
        }
    }
}
