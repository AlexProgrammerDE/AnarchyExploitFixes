package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.MaterialUtil.isShulkerBox;

public class RevertUnbreakables implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<Material> whitelistedItems = new HashSet<>();
    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist, skipZeroDurability, enableStrictPrevention,
            removeIllegalShulkers, preventHopperBypass;
    private final long checkPeriod;
    private final Material air;

    public RevertUnbreakables() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.whitelistIsEnabled = config.getBoolean("illegals.revert-unbreakables.item-whitelist-enabled", false);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.revert-unbreakables.use-as-blacklist-instead", false);
        this.skipZeroDurability = config.getBoolean("illegals.revert-unbreakables.skip-zero-durability", true, "Make sure to keep enabled, otherwise netherite tools will mistakenly be set to maximum durability, due to some bug in spigot.");
        List<String> configuredWhitelistedItems = config.getList("illegals.revert-unbreakables.whitelisted-items", Collections.singletonList("DIAMOND_CHESTPLATE"));
        for (String configuredItem : configuredWhitelistedItems) {
            try {
                Material itemMaterial = Material.valueOf(configuredItem);
                whitelistedItems.add(itemMaterial);
            } catch (IllegalArgumentException e) {
                LogUtil.materialNotRecognized(Level.WARNING, name(), configuredItem);
            }
        }
        this.preventHopperBypass = config.getBoolean("illegals.revert-unbreakables.prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n"+
                        "out of the hoppers inventory.\n"+
                        "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
        this.removeIllegalShulkers = config.getBoolean("illegals.revert-unbreakables.delete-shulker-if-contains-unbreakable", false);
        this.enableStrictPrevention = config.getBoolean("illegals.revert-unbreakables.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.revert-unbreakables.periodically-check-player-inventories.check-period-in-ticks", 20);

        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "revert-unbreakables";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            plugin.getServer().getPluginManager().registerEvents(new Listener() {
                @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    ItemStack item = event.getItem();
                    if (!whitelistIsEnabled) {
                        if (isUnbreakable(item))
                            event.setCancelled(true);
                    } else {
                        if (useWhitelistAsBlacklist) {
                            if (
                                    whitelistedItems.contains(item.getType())
                                    && isUnbreakable(item)
                            ) event.setCancelled(true);
                        } else {
                            if (
                                    !whitelistedItems.contains(item.getType())
                                    && isUnbreakable(item)
                            ) event.setCancelled(true);
                        }
                    }
                }
            }, plugin);
        }

        if (enableStrictPrevention) {
            plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, () -> {
                for (Player player : plugin.getServer().getOnlinePlayers()) {
                    for (ItemStack item : player.getInventory()) {
                        handleUnbreakablesIfPresent(item);
                    }
                }
            }, 20L, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.revert-unbreakables.enable", false);
    }

    private void handleUnbreakablesIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(air)) return;

        if (!whitelistIsEnabled) {
            filterUnbreakables(item);
        } else {
            if (useWhitelistAsBlacklist) {
                if (whitelistedItems.contains(item.getType()))
                    filterUnbreakables(item);
            } else {
                if (!whitelistedItems.contains(item.getType()))
                    filterUnbreakables(item);
            }
        }

        if (removeIllegalShulkers) {
            if (isShulkerBox(item) && shulkerContainsUnbreakable((ShulkerBox) ((BlockStateMeta) item.getItemMeta()).getBlockState())) {
                item.subtract(item.getAmount());
            }
        }
    }

    private void filterUnbreakables(ItemStack item) {
        // Remove possible unbreakable tags
        ItemMeta meta = item.getItemMeta();
        if (meta.isUnbreakable()) {
            meta.setUnbreakable(false);
            item.setItemMeta(meta);
        }

        // Check for impossible durability values
        int durability = item.getDurability();
        short maxDurability = item.getType().getMaxDurability();

        if (!skipZeroDurability || maxDurability != 0) {
            if (durability > maxDurability) {
                item.setDurability(maxDurability);
            }
            if (durability < 0) {
                item.subtract(item.getAmount());
            }
        } else {
            if (durability > 2031) {
                item.setDurability(maxDurability);
            }
        }
    }

    private boolean shulkerContainsUnbreakable(ShulkerBox shulkerBox) {
        for (ItemStack contentItem : shulkerBox.getInventory()) {
            if (contentItem == null || contentItem.getType().equals(Material.AIR)) continue;

            if (!whitelistIsEnabled) {
                if (isUnbreakable(contentItem))
                    return true;
            } else {
                if (useWhitelistAsBlacklist) {
                    if (
                            whitelistedItems.contains(contentItem.getType())
                            && isUnbreakable(contentItem)
                    ) return true;
                } else {
                    if (
                            !whitelistedItems.contains(contentItem.getType())
                            && isUnbreakable(contentItem)
                    ) return true;
                }
            }
        }
        return false;
    }

    private boolean isUnbreakable(ItemStack shulkerItem) {
        int durability = shulkerItem.getDurability();
        short maxDurability = shulkerItem.getType().getMaxDurability();
        if (!skipZeroDurability || maxDurability != 0) {
            if (durability > maxDurability) {
                return true;
            }
            return durability < 0;
        } else {
            return durability > 2031;
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory())
            handleUnbreakablesIfPresent(item);
        for (ItemStack item : player.getEnderChest())
            handleUnbreakablesIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleUnbreakablesIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleUnbreakablesIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleUnbreakablesIfPresent(event.getItem().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (removeIllegalShulkers) {
            Block placedBlock = event.getBlockPlaced();
            if (
                    MaterialUtil.SHULKER_BOXES.contains(placedBlock.getType())
                    && shulkerContainsUnbreakable((ShulkerBox) placedBlock.getState())
            ) {
                placedBlock.setType(Material.AIR);
            }
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory())
            handleUnbreakablesIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
            handleUnbreakablesIfPresent(event.getCurrentItem());
            handleUnbreakablesIfPresent(event.getCursor());
            for (ItemStack item : event.getInventory())
                handleUnbreakablesIfPresent(item);
            for (ItemStack item : event.getWhoClicked().getInventory())
                handleUnbreakablesIfPresent(item);
        },1L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        for (ItemStack item : event.getInventory())
            handleUnbreakablesIfPresent(item);
    }
}