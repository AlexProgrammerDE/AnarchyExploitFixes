package me.moomoo.anarchyexploitfixes.modules.dupepreventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Entity;
import org.bukkit.entity.HumanEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkUnloadEvent;
import org.bukkit.inventory.InventoryHolder;

public class CloseEntityInventoryOnChunkUnload implements AnarchyExploitFixesModule, Listener {
    
    public CloseEntityInventoryOnChunkUnload() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment("dupe-preventions.close-entity-inventories-on-chunk-unload", "Closes open inventories of all entities that are in a chunk that will be unloaded.");
    }

    @Override
    public String name() {
        return "close-entity-inventories-on-chunk-unload";
    }

    @Override
    public String category() {
        return "dupe-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("dupe-preventions.close-entity-inventories-on-chunk-unload", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onChunkUnload(ChunkUnloadEvent event) {
        for (Entity entity : event.getChunk().getEntities()) {
            if (entity instanceof InventoryHolder) {
                for (HumanEntity viewer : ((InventoryHolder)entity).getInventory().getViewers()) {
                    viewer.closeInventory();
                }
            }
        }
    }
}
