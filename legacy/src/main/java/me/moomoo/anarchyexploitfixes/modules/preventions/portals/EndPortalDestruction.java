package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.player.PlayerBucketEmptyEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.logging.Level;

public class EndPortalDestruction implements AnarchyExploitFixesModule,Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<Location> pillars = new HashSet<>();
    private final Material end_portal, end_portal_frame, air;
    private final int endBedrockProtectRadius;
    private final boolean logIsEnabled;

    public EndPortalDestruction() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("preventions.portals.prevent-destroying-end-portals.log", true);
        this.endBedrockProtectRadius = config.getInt("preventions.portals.prevent-destroying-end-portals.end.bedrock-protection-radius-blocks", 8);
        config.getList("preventions.portals.prevent-destroying-end-portals.end.pillar-blocks",
                Arrays.asList("world_the_end:143:140.0:-50", "world_the_end:112:90:-90"),
                "Add block locations that should be protected as well.\nFormat: <worldname>:<x>:<y>:<z>" +
                        "\nIf you don't want to use this, just configure an empty list using: pillar-blocks: []"
        ).forEach(entry -> {
            String[] location = entry.split(":");
            try {
                this.pillars.add(new Location(
                        plugin.getServer().getWorld(location[0]),
                        Integer.parseInt(location[1]),
                        Integer.parseInt(location[2]),
                        Integer.parseInt(location[3])
                ).toBlockLocation());
            } catch (NumberFormatException e) {
                LogUtil.moduleLog(Level.WARNING, name(), "Failed to read coordinates from entry '"+entry+"'. Are all values valid integers?");
            } catch (NullPointerException e) {
                LogUtil.moduleLog(Level.WARNING, name(), "Failed to parse location. Is the world name correct and the proper format being used?");
            }
        });

        this.end_portal = XMaterial.END_PORTAL.parseMaterial();
        this.end_portal_frame = XMaterial.END_PORTAL_FRAME.parseMaterial();
        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-destroying-end-portals";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.portals.prevent-destroying-end-portals.enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockDispense(BlockDispenseEvent event) {
        if (MaterialUtil.BLOCK_DISPENSE_BUCKETS.contains(event.getItem().getType()) && isNearEndPortal(event.getBlock())) {
            event.setCancelled(true);
            if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Prevented a dispenser from destroying an end portal!");
        }
    }

    private boolean isNearEndPortal(Block dispenser) {
        for (BlockFace face : BlockFace.values()) {
            if (dispenser.getRelative(face).getType().equals(end_portal)) return true;
        }
        return false;
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerBucketEvent(PlayerBucketEmptyEvent event) {
        if (event.getBlockClicked().getRelative(event.getBlockFace()).getType().equals(end_portal)) {
            event.setCancelled(true);
            if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(),"Prevented "+event.getPlayer().getName()+" from destroying an end portal!");
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonRetract(BlockPistonRetractEvent event) {
        /*
         *  Patches TNT-Less bedrock mining using pistons, redstone torches and eff 5 pickaxes like in:
         *  https://github.com/rockerle/BedrockMiner
         * */
        final Block block_that_could_get_removed = event.getBlock().getRelative(event.getDirection().getOppositeFace());

        if (
                isEndPortal(block_that_could_get_removed.getType())
                || pillars.contains(block_that_could_get_removed.getLocation())
                || isWithinEndProtectedRadius(block_that_could_get_removed.getLocation())
        ) {
            event.setCancelled(true);
            if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(),"Prevented piston from destroying an end portal!");
            return;
        }

        for (BlockFace blockFace : BlockFace.values()) {
            if (
                    isEndPortal(block_that_could_get_removed.getRelative(blockFace).getType())
                    || isEndPortal(block_that_could_get_removed.getRelative(blockFace, 2).getType())
                    || isWithinEndProtectedRadius(block_that_could_get_removed.getLocation())
            ) {
                event.setCancelled(true);
                if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(),"Prevented piston from destroying an end portal!");
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonExplode(EntityExplodeEvent event) {
        HashSet<Block> pistons_that_could_remove_protected = new HashSet<>();

        event.blockList().removeIf(block -> {
            if (MaterialUtil.PISTONS.contains(block.getType())) {
                for (BlockFace face : BlockFace.values()) {
                    if (
                            isEndPortal(block.getRelative(face).getType())
                            || isEndPortal(block.getRelative(face, 2).getType())
                            || pillars.contains(block.getRelative(face).getLocation())
                            || isWithinEndProtectedRadius(block.getLocation())
                    ) {
                        pistons_that_could_remove_protected.add(block);
                        return true;
                    }
                }
            }
            return false;
        });

        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> pistons_that_could_remove_protected.forEach(block -> block.setType(air)), 5);
    }

    private boolean isWithinEndProtectedRadius(Location location) {
        if (!location.getWorld().getEnvironment().equals(World.Environment.THE_END)) return false;
        return LocationUtil.getFlatDistanceTo00(location) <= endBedrockProtectRadius;
    }

    private boolean isEndPortal(Material material) {
        return material.equals(end_portal) || material.equals(end_portal_frame);
    }
}