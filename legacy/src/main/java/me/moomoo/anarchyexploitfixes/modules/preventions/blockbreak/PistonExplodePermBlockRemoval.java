package me.moomoo.anarchyexploitfixes.modules.preventions.blockbreak;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityExplodeEvent;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class PistonExplodePermBlockRemoval implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<String> whitelistedWorlds = new HashSet<>(3);
    private final Material air;

    public PistonExplodePermBlockRemoval() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        this.whitelistedWorlds.addAll(
                AnarchyExploitFixes.getConfiguration().getList("preventions.permanent-block-breaking.by-exploding-pistons.whitelisted-worlds",
                        Collections.singletonList("example_world_name"))
        );

        // this is theoretically not needed but there in case something changes with Material enums
        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-removing-bedrock-by-exploding-pistons";
    }

    @Override
    public String category() {
        return "bedrock";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.permanent-block-breaking.by-exploding-pistons.enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonExplode(EntityExplodeEvent event) {
        if (whitelistedWorlds.contains(event.getEntity().getWorld().getName())) return;

        Set<Block> pistons_that_could_break_indestructible_blocks = new HashSet<>();

        event.blockList().removeIf(block -> {
            if (MaterialUtil.PISTONS.contains(block.getType())) {
                for (BlockFace face : BlockFace.values()) {
                    if (MaterialUtil.INDESTRUCTIBLES.contains(block.getRelative(face).getType())) {
                        pistons_that_could_break_indestructible_blocks.add(block);
                        return true;
                    }
                }
            }
            return false;
        });

        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> pistons_that_could_break_indestructible_blocks.forEach(block -> block.setType(air)), 5);
    }
}
