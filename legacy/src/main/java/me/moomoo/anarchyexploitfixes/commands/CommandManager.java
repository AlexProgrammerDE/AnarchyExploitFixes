package me.moomoo.anarchyexploitfixes.commands;

import cloud.commandframework.annotations.AnnotationParser;
import cloud.commandframework.arguments.parser.StandardParameters;
import cloud.commandframework.bukkit.CloudBukkitCapabilities;
import cloud.commandframework.execution.AsynchronousCommandExecutionCoordinator;
import cloud.commandframework.meta.CommandMeta;
import cloud.commandframework.paper.PaperCommandManager;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.bukkit.command.CommandSender;

import java.util.function.Function;

public class CommandManager {

    private final PaperCommandManager<CommandSender> manager;
    private final AnnotationParser<CommandSender> parser;

    public CommandManager() throws Exception {
        final Function<CommandSender, CommandSender> mapperFunction = Function.identity();
        this.manager = new PaperCommandManager<>(
                /* Owning plugin */ AnarchyExploitFixes.getInstance(),
                /* Coordinator function */ AsynchronousCommandExecutionCoordinator.<CommandSender>builder().build(),
                /* Command Sender -> C */ mapperFunction,
                /* C -> Command Sender */ mapperFunction
        );

        if (manager.hasCapability(CloudBukkitCapabilities.BRIGADIER))
            manager.registerBrigadier();
        if (manager.hasCapability(CloudBukkitCapabilities.ASYNCHRONOUS_COMPLETION))
            manager.registerAsynchronousCompletions();

        // Command error messages
        manager.registerExceptionHandler(cloud.commandframework.exceptions.NoPermissionException.class, (sender, exception) ->
                sender.sendMessage(AnarchyExploitFixes.getLang(sender).no_permission));
        manager.registerExceptionHandler(cloud.commandframework.exceptions.ArgumentParseException.class, (sender, exception) ->
                sender.sendMessage(AnarchyExploitFixes.getLang(sender).failed_argument_parse));
        manager.registerExceptionHandler(cloud.commandframework.exceptions.InvalidSyntaxException.class, (sender, exception) ->
                sender.sendMessage(AnarchyExploitFixes.getLang(sender).invalid_syntax.replace("%syntax%", "/"+exception.getCorrectSyntax())));

        this.parser = new AnnotationParser<>(
                manager,
                CommandSender.class,
                parserParameters -> CommandMeta.simple().with(
                        CommandMeta.DESCRIPTION,
                        parserParameters.get(StandardParameters.DESCRIPTION, "No description")
                ).build()
        );
    }

    public PaperCommandManager<CommandSender> manager() {
        return manager;
    }

    public AnnotationParser<CommandSender> parser() {
        return parser;
    }
}
