package me.moomoo.anarchyexploitfixes.commands;

import cloud.commandframework.annotations.Argument;
import cloud.commandframework.annotations.CommandDescription;
import cloud.commandframework.annotations.CommandMethod;
import cloud.commandframework.annotations.CommandPermission;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.HandlerList;
import org.bukkit.material.MaterialData;
import org.bukkit.plugin.PluginDescriptionFile;

public class AEFCommand implements AnarchyExploitFixesCommand {

    private final AnarchyExploitFixes plugin;

    public AEFCommand() {
        this.plugin = AnarchyExploitFixes.getInstance();
    }

    @Override
    public boolean shouldRegister() {
        return true;
    }

    @CommandMethod("aef version")
    @CommandDescription("Get the plugin version.")
    @CommandPermission("anarchyexploitfixes.cmd.version")
    public void versionCommand(
            final CommandSender sender
    ) {
        PluginDescriptionFile pluginyml = plugin.getDescription();
        sender.sendMessage("\n");
        sender.sendMessage(
                ChatColor.GOLD+pluginyml.getName()+" " + pluginyml.getVersion()+
                ChatColor.GRAY+" by "+ChatColor.DARK_AQUA + pluginyml.getAuthors().get(0)+" & "+pluginyml.getAuthors().get(1)
        );
        sender.sendMessage("\n");
    }

    @CommandMethod("aef disable")
    @CommandDescription("Disable all plugin features.")
    @CommandPermission("anarchyexploitfixes.cmd.disable")
    public void disableCommand(
            final CommandSender sender
    ) {
        sender.sendMessage(ChatColor.RED + "Disabling plugin.");
        HandlerList.unregisterAll(plugin);
        plugin.getServer().getScheduler().cancelTasks(plugin);
        AnarchyExploitFixesModule.unregisterPacketListeners(plugin);
        sender.sendMessage(ChatColor.GREEN + "All enabled plugin features have been disabled.");
        sender.sendMessage(ChatColor.WHITE + "Use /aef reload to enable the plugin again. You can also use third party options like plugman or serverutils.");
    }

    @CommandMethod("aef reload")
    @CommandDescription("Reload the plugin configuration.")
    @CommandPermission("anarchyexploitfixes.cmd.reload")
    public void reloadCommand(
            final CommandSender sender
    ) {
        sender.sendMessage(ChatColor.WHITE + "Reloading AnarchyExploitFixes...");
        plugin.getServer().getScheduler().runTask(plugin, () -> {
            plugin.reloadPlugin();
            sender.sendMessage(ChatColor.GREEN + "Reload complete.");
        });
    }

    @CommandMethod("aef datavalue")
    @CommandDescription("Show the held item's datavalue.")
    @CommandPermission("anarchyexploitfixes.cmd.datavalue")
    public void dataValueCommand(
            final CommandSender sender
    ) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("Command can only be executed as player.");
            return;
        }

        MaterialData itemInMainHand = ((Player) sender).getInventory().getItemInMainHand().getData();

        if (itemInMainHand != null) {
            sender.sendMessage(ChatColor.GRAY + "DataValue: \"" + ChatColor.GOLD + itemInMainHand + ChatColor.GRAY + "\"");
        } else {
            sender.sendMessage(ChatColor.RED + "You need to hold an item in your main hand.");
        }
    }

    @CommandMethod("aef lag <milliseconds>")
    @CommandDescription("Artificially lag the server for testing.")
    @CommandPermission("anarchyexploitfixes.cmd.lag")
    public void lagCommand(
            final CommandSender sender,
            final @Argument(value = "milliseconds", description = "Lag duration in milliseconds") long millis
    ) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            sender.sendMessage(ChatColor.RED + "Operation was interrupted! - " + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }

    @CommandMethod("aef elytra")
    @CommandDescription("Show how many players are currently flying with an elytra.")
    @CommandPermission("anarchyexploitfixes.cmd.elytra")
    public void elytraCommand(
            final CommandSender sender
    ) {
        StringBuilder flying = new StringBuilder();
        StringBuilder notFlying = new StringBuilder();
        int glidingPlayerCount = 0;
        int nonGlidingPlayerCount = 0;

        for (Player player : plugin.getServer().getOnlinePlayers()) {
            if (player.isGliding()) {
                flying.append(player.getName()).append(", ");
                glidingPlayerCount++;
            } else {
                notFlying.append(player.getName()).append(", ");
                nonGlidingPlayerCount++;
            }
        }

        sender.sendMessage("elytra flying: " + ChatColor.GOLD + flying + ChatColor.WHITE + " (" + glidingPlayerCount + ")");
        sender.sendMessage("Not elytra flying: " + ChatColor.GOLD + notFlying + ChatColor.WHITE + " (" + nonGlidingPlayerCount + ")");
        sender.sendMessage("Total players: " + ChatColor.GOLD + (glidingPlayerCount + nonGlidingPlayerCount));
    }

    @CommandMethod("aef geared")
    @CommandDescription("Show how many players are currently wearing at least one armor piece.")
    @CommandPermission("anarchyexploitfixes.cmd.geared")
    public void gearedCommand(
            final CommandSender sender
    ) {
        StringBuilder geared = new StringBuilder();
        StringBuilder ungeared = new StringBuilder();
        int gearedPlayerCount = 0;
        int ungearedPlayerCount = 0;

        for (Player player : plugin.getServer().getOnlinePlayers()) {
            if (
                    player.getInventory().getChestplate() != null
                    || player.getInventory().getBoots() != null
                    || player.getInventory().getHelmet() != null
                    || player.getInventory().getLeggings() != null
            ) {
                geared.append(player.getName()).append(", ");
                gearedPlayerCount++;
            } else {
                ungeared.append(player.getName()).append(", ");
                ungearedPlayerCount++;
            }
        }

        sender.sendMessage("Geared players: " + ChatColor.GOLD + geared + ChatColor.WHITE + " (" + gearedPlayerCount + ")");
        sender.sendMessage("Ungeared players: " + ChatColor.GOLD + ungeared + ChatColor.WHITE + " (" + ungearedPlayerCount + ")");
        sender.sendMessage("Total players: " + ChatColor.GOLD + (ungearedPlayerCount + gearedPlayerCount));
    }
}