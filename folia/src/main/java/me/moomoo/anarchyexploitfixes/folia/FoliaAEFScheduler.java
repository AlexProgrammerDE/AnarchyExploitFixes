package me.moomoo.anarchyexploitfixes.folia;

import me.moomoo.anarchyexploitfixes.common.AEFScheduler;
import me.moomoo.anarchyexploitfixes.common.ScheduledTask;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.plugin.java.JavaPlugin;
import org.jetbrains.annotations.Nullable;

public class FoliaAEFScheduler implements AEFScheduler {
    private final JavaPlugin plugin;

    public FoliaAEFScheduler(JavaPlugin plugin) {
        this.plugin = plugin;
    }


    @Override
    public ScheduledTask runGlobalAtFixedRate(Runnable runnable, long period, long delay) {
        return wrapTask(plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> runnable.run(), period, delay));
    }

    @Override
    public ScheduledTask runGlobalDelayed(Runnable runnable, long delay) {
        return wrapTask(plugin.getServer().getGlobalRegionScheduler().runDelayed(plugin, task -> runnable.run(), delay));
    }

    @Override
    public ScheduledTask runGlobal(Runnable runnable) {
        return wrapTask(plugin.getServer().getGlobalRegionScheduler().run(plugin, task -> runnable.run()));
    }

    @Override
    public ScheduledTask runSyncToChunk(World world, int x, int z, Runnable runnable) {
        return wrapTask(plugin.getServer().getRegionScheduler().run(plugin, world, x, z, task -> runnable.run()));
    }

    @Override
    public ScheduledTask runSyncToChunkDelayed(Location location, Runnable runnable, long delay) {
        return wrapTask(plugin.getServer().getRegionScheduler().runDelayed(plugin, location, task -> runnable.run(), delay));
    }

    @Override
    public ScheduledTask runSyncToEntity(Entity entity, Runnable runnable) {
        return wrapTask(entity.getScheduler().run(plugin, task -> runnable.run(), () -> {}));
    }

    @Override
    public ScheduledTask runSyncToEntityDelayed(Entity entity, Runnable runnable, long delay) {
        return wrapTask(entity.getScheduler().runDelayed(plugin, task -> runnable.run(), () -> {}, delay));
    }

    private ScheduledTask wrapTask(@Nullable io.papermc.paper.threadedregions.scheduler.ScheduledTask task) {
        if (task == null) {
            return () -> {};
        }

        return task::cancel;
    }
}
