package me.moomoo.anarchyexploitfixes.modules.preventions.withers;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.Wither;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ProjectileLaunchEvent;

import java.util.HashMap;
import java.util.UUID;

public class RateLimitWitherSkulls implements AnarchyExploitFixesModule, Listener {

    private ScheduledTask scheduledTask;
    private final HashMap<UUID, Long> withersShootingSkulls = new HashMap<>();
    private final long skullCooldown_NoTarget, skullCooldown_PlayerTarget, skullCooldown_OtherTarget;
    
    public RateLimitWitherSkulls() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.withers.rate-limit-wither-skulls.enable", "This can help combat lag caused by a ton of witherskulls spawning but weakens withers.");
        this.skullCooldown_PlayerTarget = config.getInt("preventions.withers.rate-limit-wither-skulls.player-target-cooldown-in-ticks", 20, "Cooldown until another skull will be shot at a player") * 50L;
        this.skullCooldown_OtherTarget = config.getInt("preventions.withers.rate-limit-wither-skulls.other-target-cooldown-in-ticks", 40, "Cooldown until another skull can be shot at anything else other than a player") * 50L;
        this.skullCooldown_NoTarget = config.getInt("preventions.withers.rate-limit-wither-skulls.no-target-cooldown-in-ticks", 100, "Cooldown when wither has no target") * 50L;
    }

    @Override
    public String name() {
        return "rate-limit-wither-skulls";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        // clear hashmap every 5 minutes to preserve ram
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> withersShootingSkulls.clear(), 6000L, 6000L);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.withers.rate-limit-wither-skulls.enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onProjectileLaunch(ProjectileLaunchEvent event) {
        if (!event.getEntityType().equals(EntityType.WITHER_SKULL)) return;
        if (!(event.getEntity().getShooter() instanceof Wither wither)) return;

        final UUID witherUniqueId = wither.getUniqueId();

        if (
                withersShootingSkulls.containsKey(witherUniqueId)
                && withersShootingSkulls.get(witherUniqueId) > System.currentTimeMillis()
        ) {
            event.setCancelled(true);
        } else {
            if (wither.getTarget() instanceof Player) {
                withersShootingSkulls.put(witherUniqueId, System.currentTimeMillis() + skullCooldown_PlayerTarget);
            } else if (wither.getTarget() != null) {
                withersShootingSkulls.put(witherUniqueId, System.currentTimeMillis() + skullCooldown_OtherTarget);
            } else {
                withersShootingSkulls.put(witherUniqueId, System.currentTimeMillis() + skullCooldown_NoTarget);
            }
        }
    }
}
