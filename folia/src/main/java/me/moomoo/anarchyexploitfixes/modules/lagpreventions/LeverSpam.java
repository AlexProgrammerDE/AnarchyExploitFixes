package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;

import java.time.Duration;
import java.util.UUID;

public class LeverSpam implements AnarchyExploitFixesModule, Listener {

    private final Cache<Location, Integer> leverLocationCooldowns;
    private final Cache<UUID, Integer> playersUsingLeversCooldowns;
    private final int leverUsageLimit;
    private final boolean shouldKickPlayer, sendActionBar;

    public LeverSpam() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("lag-preventions.prevent-lever-spam.enable", "Rate Limit levers to prevent a lag exploit.");
        this.sendActionBar = config.getBoolean("lag-preventions.prevent-lever-spam.show-actionbar", true);
        this.shouldKickPlayer = config.getBoolean("lag-preventions.prevent-lever-spam.kick-player", false);
        this.leverUsageLimit = config.getInt("lag-preventions.prevent-lever-spam.max-lever-usages-per-time", 15);
        final long cacheTimeMillis = config.getInt("lag-preventions.prevent-lever-spam.lever-time-in-ticks", 40) * 50L;
        this.leverLocationCooldowns = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(cacheTimeMillis)).build();
        this.playersUsingLeversCooldowns = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(cacheTimeMillis)).build();
    }

    @Override
    public String name() {
        return "prevent-lever-spam";
    }

    @Override
    public String category() {
        return "lag-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.prevent-lever-spam.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        Block clicked = event.getClickedBlock();
        if (!clicked.getType().equals(Material.LEVER)) return;

        final Player player = event.getPlayer();

        final Location leverLoc = clicked.getLocation();
        Integer activationCount = leverLocationCooldowns.getIfPresent(leverLoc);

        if (activationCount == null) {
            leverLocationCooldowns.put(leverLoc, 1);
        } else {
            activationCount++;
            leverLocationCooldowns.put(leverLoc, activationCount);
            if (activationCount > leverUsageLimit) {
                event.setCancelled(true);
                if (shouldKickPlayer) {
                    player.kick(AnarchyExploitFixes.getLang(player.locale()).lagpreventions_stopSpammingLevers);
                    return;
                }
                if (sendActionBar) {
                    player.sendActionBar(AnarchyExploitFixes.getLang(player.locale()).lagpreventions_stopSpammingLevers);
                }
                return;
            }
        }

        final UUID playerUniqueId = player.getUniqueId();
        Integer leverFlickCount = playersUsingLeversCooldowns.getIfPresent(playerUniqueId);

        if (leverFlickCount == null) {
            playersUsingLeversCooldowns.put(playerUniqueId, 1);
        } else {
            leverFlickCount++;
            playersUsingLeversCooldowns.put(playerUniqueId, leverFlickCount);
            if (leverFlickCount > leverUsageLimit) {
                event.setCancelled(true);
                if (shouldKickPlayer) {
                    player.kick(AnarchyExploitFixes.getLang(player.locale()).lagpreventions_stopSpammingLevers);
                    return;
                }
                if (sendActionBar) {
                    player.sendActionBar(AnarchyExploitFixes.getLang(player.locale()).lagpreventions_stopSpammingLevers);
                }
            }
        }
    }
}