package me.moomoo.anarchyexploitfixes.modules.patches;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerRespawnEvent;
import org.bukkit.event.player.PlayerTeleportEvent;

import java.util.UUID;

public class TeleportCoordExploit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final int minDistanceToVanishPlayers;
    private final long teleportVanishTime;

    public TeleportCoordExploit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.prevent-teleport-coordinate-exploit.enable", """
                        Patches coordinate exploit for teleportation commands such as /tpa, /home AS WELL as respawn exploits
                        such as finding location from bed respawn point.
                        This is done by vanishing the player for x ticks before teleporting.""");
        this.minDistanceToVanishPlayers = config.getInt("patches.prevent-teleport-coordinate-exploit.min-distance-to-vanish-player", 100);
        this.teleportVanishTime = config.getInt("patches.prevent-teleport-coordinate-exploit.teleport-vanish-time-in-ticks", 10);
    }

    @Override
    public String name() {
        return "prevent-teleport-coordinate-exploit";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-teleport-coordinate-exploit.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void tempVanish(Player player) {
        final UUID vanishedUUID = player.getUniqueId();
        for (Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (onlinePlayer.getUniqueId().equals(vanishedUUID)) continue;

            onlinePlayer.getScheduler().run(plugin, tempVanish -> {
                onlinePlayer.hidePlayer(plugin, player);
                onlinePlayer.getScheduler().runDelayed(plugin, unVanish -> onlinePlayer.showPlayer(plugin, player), null, teleportVanishTime);
            }, null);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onTeleport(PlayerTeleportEvent event) {
        switch (event.getCause()) {
            case ENDER_PEARL, COMMAND, PLUGIN ->  {
                if (LocationUtil.getFlatDistance(event.getFrom(), event.getTo()) >= minDistanceToVanishPlayers) {
                    this.tempVanish(event.getPlayer());
                }
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSpawn(PlayerRespawnEvent event) {
        final Player player = event.getPlayer();
        if (LocationUtil.getFlatDistance(player.getLocation(), event.getRespawnLocation()) >= minDistanceToVanishPlayers) {
            this.tempVanish(player);
        }
    }
}