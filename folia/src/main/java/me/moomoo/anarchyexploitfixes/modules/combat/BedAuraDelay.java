package me.moomoo.anarchyexploitfixes.modules.combat;

import com.destroystokyo.paper.MaterialTags;
import io.papermc.paper.event.player.PlayerBedFailEnterEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.models.ExpiringSet;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

import java.time.Duration;
import java.util.HashSet;
import java.util.UUID;

public class BedAuraDelay implements AnarchyExploitFixesModule, Listener {
    
    private final ExpiringSet<UUID> breakCooldowns;
    private final ExpiringSet<UUID> placeCooldowns;
    private final HashSet<Material> beds;
    private final long breakDelayMillis, placeDelayMillis;
    
    public BedAuraDelay() {
        shouldEnable();
        this.beds = new HashSet<>(MaterialTags.BEDS.getValues());
        Config config = AnarchyExploitFixes.getConfiguration();
        this.breakDelayMillis = config.getInt("combat.bed-aura-delay.break-delay-in-ticks", 5,
                "Set to -1 to disable.") * 50L;
        this.breakCooldowns = breakDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(breakDelayMillis));
        this.placeDelayMillis = config.getInt("combat.bed-aura-delay.place-delay-in-ticks", -1) * 50L;
        this.placeCooldowns = placeDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(placeDelayMillis));
    }

    @Override
    public String name() {
        return "bed-aura-delay";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.bed-aura-delay.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBedBreak(PlayerBedFailEnterEvent event) {
        if (breakDelayMillis <= 0 || !event.getWillExplode()) return;

        final UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (breakCooldowns.contains(playerUniqueId)) {
            event.setCancelled(true);
        } else {
            breakCooldowns.add(playerUniqueId);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBedPlace(BlockPlaceEvent event) {
        if (placeDelayMillis <= 0) return;
        Block placed = event.getBlockPlaced();
        if (!beds.contains(placed.getType()) || placed.getWorld().isBedWorks()) return;

        final UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (placeCooldowns.contains(playerUniqueId)) {
            event.setCancelled(true);
        } else {
            placeCooldowns.add(playerUniqueId);
        }
    }
}