package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.papermc.paper.tag.EntityTags;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.EntityUtil;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Vehicle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.vehicle.VehicleCreateEvent;

import java.util.HashSet;
import java.util.logging.Level;

public class VehicleLimit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<EntityType> VEHICLE_TYPES;
    private ScheduledTask scheduledTask;
    private final long checkPeriod;
    private final int maxVehiclesPerChunk;
    private final boolean logIsEnabled;

    public VehicleLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        this.VEHICLE_TYPES = new HashSet<>(); // Used to cache entity types of vehicles for faster operations
        // Prefill with known types;
        this.VEHICLE_TYPES.addAll(EntityUtil.BOATS);
        this.VEHICLE_TYPES.addAll(EntityTags.HORSES.getValues());
        this.VEHICLE_TYPES.addAll(EntityTags.MINECARTS.getValues());
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.vehicle-limit.enable",
                "Limit the amount of vehicles to prevent some lag machines involving boats and a dispenser.");
        this.logIsEnabled = config.getBoolean("chunk-limits.vehicle-limit.log-removals", false);
        this.maxVehiclesPerChunk = config.getInt("chunk-limits.vehicle-limit.max-vehicles-per-chunk", 25);
        this.checkPeriod = config.getInt("chunk-limits.vehicle-limit.check-period-in-ticks", 400,
                "200 ticks = 10 seconds.");
    }

    @Override
    public String name() {
        return "vehicle-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.vehicle-limit.enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCreate(VehicleCreateEvent event) {
        int vehicleCount = 0;

        for (Entity entity : event.getVehicle().getChunk().getEntities()) {
            final EntityType type = entity.getType();

            if (VEHICLE_TYPES.contains(type)) {
                vehicleCount++;
                if (vehicleCount <= maxVehiclesPerChunk) continue;

                entity.getScheduler().run(plugin, kill -> {
                    entity.remove();
                    if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed vehicle " + entity.getType()
                            + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY()
                            + " z:" + entity.getLocation().getZ() + ", because reached limit of " + maxVehiclesPerChunk);
                }, null);

                continue;
            }

            if (entity instanceof Vehicle) {
                VEHICLE_TYPES.add(type); // Add type of vehicle to HashSet for faster operation in the future
                vehicleCount++;
                if (vehicleCount <= maxVehiclesPerChunk) continue;

                entity.getScheduler().run(plugin, kill -> {
                    entity.remove();
                    if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed vehicle " + entity.getType()
                            + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY()
                            + " z:" + entity.getLocation().getZ() + ", because reached limit of " + maxVehiclesPerChunk);
                }, null);
            }
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), task -> {
                    Chunk.LoadLevel level = chunk.getLoadLevel();
                    if (!level.equals(Chunk.LoadLevel.ENTITY_TICKING) && !level.equals(Chunk.LoadLevel.TICKING)) return;

                    int vehicleCount = 0;

                    for (Entity entity : chunk.getEntities()) {
                        final EntityType type = entity.getType();

                        if (VEHICLE_TYPES.contains(type)) {
                            vehicleCount++;
                            if (vehicleCount <= maxVehiclesPerChunk) continue;

                            entity.getScheduler().run(plugin, kill -> {
                                entity.remove();
                                if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed vehicle "
                                        + entity.getType() + " at x:" + entity.getLocation().getX()
                                        + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                                        + ", because reached limit of " + maxVehiclesPerChunk);
                            }, null);

                            continue;
                        }

                        if (entity instanceof Vehicle) {
                            VEHICLE_TYPES.add(type); // Add type of vehicle to HashSet for faster operation in the future
                            vehicleCount++;
                            if (vehicleCount <= maxVehiclesPerChunk) continue;

                            entity.getScheduler().run(plugin, kill -> {
                                entity.remove();
                                if (logIsEnabled) LogUtil.moduleLog(Level.INFO, name(), "Removed vehicle "
                                        + entity.getType() + " at x:" + entity.getLocation().getX()
                                        + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                                        + ", because reached limit of " + maxVehiclesPerChunk);
                            }, null);
                        }
                    }
                });
            }
        }
    }
}
