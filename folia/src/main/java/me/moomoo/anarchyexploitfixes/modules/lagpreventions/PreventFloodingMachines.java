package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.data.Waterlogged;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;

public class PreventFloodingMachines implements AnarchyExploitFixesModule, Listener {

    private final boolean shouldDeleteWaterlogged;

    public PreventFloodingMachines() {
        shouldEnable();
        this.shouldDeleteWaterlogged = AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.prevent-flooding-machines.delete-waterlogged-blocks", true);
    }

    @Override
    public String name() {
        return "prevent-flooding-machines";
    }

    @Override
    public String category() {
        return "lag-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.prevent-flooding-machines.enable", false);
    }

    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    private void onPistonExtend(BlockPistonExtendEvent event) {
        for (Block block : event.getBlocks()) {
            if (
                    block.getBlockData() instanceof Waterlogged waterlogged
                    && waterlogged.isWaterlogged()
            ) {
                if (shouldDeleteWaterlogged) block.setType(Material.AIR);
                event.setCancelled(true);
                return;
            }
        }
    }
}
