package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import com.destroystokyo.paper.MaterialTags;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtil;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BundleMeta;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.MaterialUtil.isShulkerBox;

public class RevertOverstacked implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask periodicInvCheck;
    private Listener hopperListener;
    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist, enableStrictPrevention, removeIllegalShulkers,
        preventIllegalUnbundle, preventHopperBypass;
    private final HashSet<Material> whitelistedItems = new HashSet<>();
    private final long checkPeriod;

    public RevertOverstacked() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.revert-overstacked-items.enable", "Revert illegally high stacked items.");
        this.whitelistIsEnabled = config.getBoolean("illegals.revert-overstacked-items.item-whitelist-enabled", false);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.revert-overstacked-items.use-as-blacklist-instead", true);
        config.getList("illegals.revert-overstacked-items.whitelisted-items",
                List.of("TOTEM_OF_UNDYING")
        ).forEach(configuredItem -> {
            try {
                Material itemMaterial = Material.valueOf(configuredItem);
                this.whitelistedItems.add(itemMaterial);
            } catch (IllegalArgumentException e) {
                LogUtil.materialNotRecognized(Level.WARNING, name(), configuredItem);
            }
        });
        this.preventHopperBypass = config.getBoolean("illegals.revert-overstacked-items.prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\s
                out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.""");
        this.removeIllegalShulkers = config.getBoolean("illegals.revert-overstacked-items.delete-shulker-if-contains-overstacked", false);
        this.preventIllegalUnbundle = config.getBoolean("illegals.revert-overstacked-items.bundles-cant-unbundle-if-contains-overstacked", false);
        this.enableStrictPrevention = config.getBoolean("illegals.revert-overstacked-items.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.revert-overstacked-items.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "revert-overstacked-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            this.hopperListener = new Listener() {
                @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    ItemStack item = event.getItem();
                    if (!whitelistIsEnabled) {
                        if (item.getAmount() > item.getMaxStackSize())
                            event.setCancelled(true);
                    } else {
                        if (useWhitelistAsBlacklist) {
                            if (
                                    whitelistedItems.contains(item.getType())
                                    && item.getAmount() > item.getMaxStackSize()
                            ) event.setCancelled(true);
                        } else {
                            if (
                                    !whitelistedItems.contains(item.getType())
                                    && item.getAmount() > item.getMaxStackSize()
                            ) event.setCancelled(true);
                        }
                    }
                }
            };
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }

        if (enableStrictPrevention) {
            this.periodicInvCheck = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, periodic_inv_check ->
                    plugin.getServer().getOnlinePlayers().forEach(player -> player.getScheduler().run(plugin, scheduled_inv_check ->
                            player.getInventory().forEach(this::handleOverstackedIfPresent), null)), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.revert-overstacked-items.enable", false);
    }

    @Override
    public void disable() {
        if (periodicInvCheck != null) periodicInvCheck.cancel();
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    private void handleOverstackedIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(Material.AIR)) return;

        if (!whitelistIsEnabled) {
            final int maxStackSize = item.getMaxStackSize();
            if (item.getAmount() > maxStackSize)
                item.setAmount(maxStackSize);
        } else {
            if (useWhitelistAsBlacklist) {
                if (whitelistedItems.contains(item.getType())) {
                    final int maxStackSize = item.getMaxStackSize();
                    if (item.getAmount() > maxStackSize)
                        item.setAmount(maxStackSize);
                }
            } else {
                if (!whitelistedItems.contains(item.getType())) {
                    final int maxStackSize = item.getMaxStackSize();
                    if (item.getAmount() > maxStackSize)
                        item.setAmount(maxStackSize);
                }
            }
        }

        if (removeIllegalShulkers) {
            if (isShulkerBox(item) && shulkerContainsOverstacked((ShulkerBox) ((BlockStateMeta) item.getItemMeta()).getBlockState())) {
                item.subtract(item.getAmount());
            }
        }
    }

    private boolean shulkerContainsOverstacked(ShulkerBox shulkerBox) {
        for (ItemStack shulkerContentItem : shulkerBox.getInventory()) {
            if (shulkerContentItem == null || shulkerContentItem.getType().equals(Material.AIR)) continue;

            if (!whitelistIsEnabled) {
                if (shulkerContentItem.getAmount() > shulkerContentItem.getMaxStackSize())
                    return true;
            } else {
                if (useWhitelistAsBlacklist) {
                    if (
                            whitelistedItems.contains(shulkerContentItem.getType())
                            && shulkerContentItem.getAmount() > shulkerContentItem.getMaxStackSize()
                    ) return true;
                } else {
                    if (
                            !whitelistedItems.contains(shulkerContentItem.getType())
                            && shulkerContentItem.getAmount() > shulkerContentItem.getMaxStackSize()
                    ) return true;
                }
            }
        }
        return false;
     }

    private boolean isIllegalBundle(ItemStack item) {
        if (item == null) return false;
        if (!item.getType().equals(Material.BUNDLE)) return false;
        BundleMeta meta = (BundleMeta) item.getItemMeta();
        if (!meta.hasItems()) return false;

        for (ItemStack bundleItem : meta.getItems()) {
            if (bundleItem == null || bundleItem.getType().equals(Material.AIR)) continue;

            if (!whitelistIsEnabled) {
                if (bundleItem.getAmount() > bundleItem.getMaxStackSize())
                    return true;
            } else {
                if (useWhitelistAsBlacklist) {
                    if (
                            whitelistedItems.contains(bundleItem.getType())
                            && bundleItem.getAmount() > bundleItem.getMaxStackSize()
                    ) return true;
                } else {
                    if (
                            !whitelistedItems.contains(bundleItem.getType())
                            && bundleItem.getAmount() > bundleItem.getMaxStackSize()
                    ) return true;
                }
            }
        }
        return false;
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        player.getInventory().forEach(this::handleOverstackedIfPresent);
        player.getEnderChest().forEach(this::handleOverstackedIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleOverstackedIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleOverstackedIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleOverstackedIfPresent(event.getItem().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (removeIllegalShulkers) {
            Block placedBlock = event.getBlockPlaced();
            if (MaterialTags.SHULKER_BOXES.isTagged(placedBlock) && shulkerContainsOverstacked((ShulkerBox) placedBlock.getState())) {
                placedBlock.setType(Material.AIR);
            }
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        event.getInventory().forEach(this::handleOverstackedIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        if (preventIllegalUnbundle && event.isRightClick()) {
            if (isIllegalBundle(event.getCursor()) || isIllegalBundle(event.getCurrentItem())) {
                event.setCancelled(true);
            }
        }

        HumanEntity player = event.getWhoClicked();
        player.getScheduler().runDelayed(plugin, checkInvAfterClick -> {
            handleOverstackedIfPresent(event.getCursor());
            handleOverstackedIfPresent(event.getCurrentItem());
            event.getInventory().forEach(this::handleOverstackedIfPresent);
            player.getInventory().forEach(this::handleOverstackedIfPresent);
        }, null, 1L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        event.getInventory().forEach(this::handleOverstackedIfPresent);
    }
}
