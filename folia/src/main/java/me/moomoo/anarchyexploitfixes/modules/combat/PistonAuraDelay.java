package me.moomoo.anarchyexploitfixes.modules.combat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.models.ExpiringSet;
import org.bukkit.Location;
import org.bukkit.entity.EnderCrystal;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;

import java.time.Duration;

public class PistonAuraDelay implements AnarchyExploitFixesModule, Listener {

    private final ExpiringSet<Location> pistonsPushingCrystals;

    public PistonAuraDelay() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("combat.crystal-aura.piston-aura-delay.enable", "Rate-limits pistons that extend into crystals");
        this.pistonsPushingCrystals = new ExpiringSet<>(Duration.ofMillis(
                config.getInt("combat.crystal-aura.piston-aura-delay.piston-extend-delay-in-ticks", 40) * 50L));
    }

    @Override
    public String name() {
        return "crystal-aura.piston-aura-delay";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.crystal-aura.piston-aura-delay.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonExtend(BlockPistonExtendEvent event) {
        if (
                !event.getBlock().getRelative(event.getDirection()).getLocation()
                        .getNearbyEntitiesByType(EnderCrystal.class, 1,1,1).isEmpty()
        ) {
            final Location pistonLoc = event.getBlock().getLocation();
            if (pistonsPushingCrystals.contains(pistonLoc)) {
                event.setCancelled(true);
            } else {
                pistonsPushingCrystals.add(pistonLoc);
            }
        }
    }
}
