package me.moomoo.anarchyexploitfixes.modules.combat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.models.ExpiringSet;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

import java.time.Duration;
import java.util.UUID;

public class AnchorAuraDelay implements AnarchyExploitFixesModule, Listener {

    private final ExpiringSet<UUID> placeCooldowns;
    private final ExpiringSet<UUID> breakCooldowns;
    private final long placeDelayMillis, breakDelayMillis;
    private final boolean updateInv;

    public AnchorAuraDelay() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.updateInv = config.getBoolean("combat.anchor-aura-delay.update-inventory-on-cancel", false,
                "Can help with desync in some cases but recommended to leave off unless needed.");
        this.placeDelayMillis = config.getInt("combat.anchor-aura-delay.place-delay-in-ticks", 8) * 50L;
        this.placeCooldowns = placeDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(placeDelayMillis));
        this.breakDelayMillis = config.getInt("combat.anchor-aura-delay.break-delay-in-ticks", -1) * 50L;
        this.breakCooldowns = breakDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(breakDelayMillis));
    }

    @Override
    public String name() {
        return "anchor-aura-delay";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.anchor-aura-delay.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAnchorBreak(PlayerInteractEvent event) {
        if (breakDelayMillis <= 0) return;
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        final ItemStack interactItem = event.getItem();
        if (interactItem == null || !interactItem.getType().equals(Material.GLOWSTONE)) return;

        final UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (breakCooldowns.contains(playerUniqueId)) {
            event.setCancelled(true);
            if (updateInv) event.getPlayer().updateInventory();
        } else {
            breakCooldowns.add(playerUniqueId);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAnchorPlace(BlockPlaceEvent event) {
        if (placeDelayMillis <= 0) return;
        if (!event.getBlock().getType().equals(Material.RESPAWN_ANCHOR)) return;

        final UUID playerUniqueId = event.getPlayer().getUniqueId();
        if (placeCooldowns.contains(playerUniqueId)) {
            event.setCancelled(true);
            if (updateInv) event.getPlayer().updateInventory();
        } else {
            placeCooldowns.add(playerUniqueId);
        }
    }
}